# shared/data_processing.py
"""
–ú–æ–¥—É–ª—å –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞

–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç:
- Feature engineering (–Ω–∞–ø—Ä–∏–º–µ—Ä, loan_to_income_ratio)
- One-Hot Encoding –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
- –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –æ–±—É—á–µ–Ω–∏—è
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–æ–±—É—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ —Ñ–∏–¥–±—ç–∫–æ–≤

–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
- feature_engineering: —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
- preprocess_data_for_prediction: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–µ–º—â–∏–∫–∞
- preprocess_data: –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
- check_and_retrain: –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏

–ê–≤—Ç–æ—Ä: [–ö–æ—á–Ω–µ–≤–∞ –ê—Ä–∏–Ω–∞]
–ì–æ–¥: 2025
"""

import pandas as pd
from pathlib import Path
import joblib
import logging

# –ò–º–ø–æ—Ä—Ç –ø—É—Ç–µ–π –∏–∑ —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from shared.config import (
    FEATURE_NAMES_PATH,
    DATA_DIR
)


logger = logging.getLogger(__name__)


# --- üîπ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è One-Hot Encoding ---
"""
–°–ª–æ–≤–∞—Ä—å –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è OHE, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏—á–µ–π
–ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏ –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏.

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏:
- person_home_ownership: —Ç–∏–ø —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏
- loan_intent: —Ü–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞
- loan_grade: –∫—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
- cb_person_default_on_file: –±—ã–ª –ª–∏ –¥–µ—Ñ–æ–ª—Ç
"""
CATEGORIES = {
    'person_home_ownership': ['MORTGAGE', 'OTHER', 'OWN', 'RENT'],
    'loan_intent': [
        'DEBTCONSOLIDATION', 'EDUCATION', 'HOMEIMPROVEMENT',
        'MEDICAL', 'PERSONAL', 'VENTURE'
    ],
    'loan_grade': ['A', 'B', 'C', 'D', 'E', 'F', 'G'],
    'cb_person_default_on_file': ['N', 'Y']
}


def feature_engineering(df: pd.DataFrame) -> pd.DataFrame:
    """
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.

    –í —Ç–µ–∫—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
        - loan_to_income_ratio = loan_amnt / person_income

    Args:
        df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º

    Returns:
        pd.DataFrame: –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –Ω–æ–≤—ã–º–∏ –ø—Ä–∏–∑–Ω–∞–∫–∞–º–∏

    –ü—Ä–∏–º–µ—Ä:
        >>> df['loan_to_income_ratio'] =
            df['loan_amnt'] / df['person_income']

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
        - –§—É–Ω–∫—Ü–∏—è –Ω–µ –∏–∑–º–µ–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π DataFrame
        - –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—Å–µ–≥–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ö–æ–¥–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ + –Ω–æ–≤—ã–µ
    """
    df = df.copy()
    df['loan_to_income_ratio'] = df['loan_amnt'] / df['person_income']
    return df


def preprocess_data_for_prediction(df: pd.DataFrame) -> pd.DataFrame:
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –º–æ–¥–µ–ª–∏.

    –≠—Ç–∞–ø—ã:
        1. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (feature engineering)
        2. One-Hot Encoding –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        3. –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∞–ª—å–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫
        4. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ñ–∏—á–∞–º–∏ –∏–∑ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏

    Args:
        df (pd.DataFrame): –î–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–µ–º—â–∏–∫–æ–≤

    Returns:
        pd.DataFrame: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ø–æ—Ä—è–¥–∫–æ–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∏—á–µ–π

    Raises:
        ValueError: –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∑–∞–≥—Ä—É–∑–∫–∏ feature_names.pkl

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
        - –ï—Å–ª–∏ feature_names.pkl –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä —Ñ–∏—á–µ–π
        - –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∏—á–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –∫–∞–∫ 0
        - –õ–∏—à–Ω–∏–µ —Ñ–∏—á–∏ —É–¥–∞–ª—è—é—Ç—Å—è
        - –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –º–æ–¥–µ–ª—å—é, –æ–±—É—á–µ–Ω–Ω–æ–π —Ä–∞–Ω–µ–µ
    """
    df = df.copy()
    df = feature_engineering(df)

    # One-Hot Encoding
    for col, categories in CATEGORIES.items():
        for cat in categories:
            df[f"{col}_{cat}"] = (df[col] == cat).astype(int)
        df = df.drop(col, axis=1)

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ñ–∏—á–∞–º –∏–∑ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    if FEATURE_NAMES_PATH.exists():
        try:
            expected_features = joblib.load(FEATURE_NAMES_PATH)
            logger.info(
                f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(expected_features)} –æ–∂–∏–¥–∞–µ–º—ã—Ö "
                f"—Ñ–∏—á–µ–π –∏–∑ {FEATURE_NAMES_PATH}"
            )
        except Exception as e:
            raise Exception(
                f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {FEATURE_NAMES_PATH}: {e}"
            )
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ —Ñ–∏—á–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è)
        expected_features = df.columns.tolist()
        logger.error(
            f"‚ö†Ô∏è {FEATURE_NAMES_PATH} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–∏–µ "
            f"—Ñ–∏—á–∏: {len(expected_features)}"
        )

    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ–∏—á–∏ –∫–∞–∫ 0
    for col in expected_features:
        if col not in df.columns:
            df[col] = 0

    # –£–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º —Ñ–∏—á–∏ –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –ø—Ä–∏ –æ–±—É—á–µ–Ω–∏–∏
    df = df[expected_features]

    return df


def preprocess_data(df: pd.DataFrame) -> (pd.DataFrame, pd.Series):
    """
    –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.

    –í–∫–ª—é—á–∞–µ—Ç:
        - Feature engineering
        - One-Hot Encoding
        - –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –ø—Ä–∏–∑–Ω–∞–∫–∏ (X) –∏ —Ü–µ–ª–µ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é (y)

    Args:
        df (pd.DataFrame): –ò—Å—Ö–æ–¥–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º —Å —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    Returns:
        tuple: (X, y) ‚Äî –º–∞—Ç—Ä–∏—Ü–∞ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –∏ –≤–µ–∫—Ç–æ—Ä —Ü–µ–ª–µ–≤–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ —ç—Ç–∞–ø–µ –æ–±—É—á–µ–Ω–∏—è –∏ –¥–æ–æ–±—É—á–µ–Ω–∏—è
        - –ù–µ —Ç—Ä–µ–±—É–µ—Ç feature_names.pkl, —Ç–∞–∫ –∫–∞–∫ X —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –∑–∞–Ω–æ–≤–æ
    """
    df = df.copy()
    df = feature_engineering(df)

    # One-Hot Encoding
    for col, categories in CATEGORIES.items():
        for cat in categories:
            df[f"{col}_{cat}"] = (df[col] == cat).astype(int)
        df = df.drop(col, axis=1)

    X = df.drop('loan_status', axis=1)
    y = df['loan_status']

    return X, y


def check_and_retrain():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–¥–±—ç–∫–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–æ–±—É—á–µ–Ω–∏–µ.

    –õ–æ–≥–∏–∫–∞:
        - –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ feedback.jsonl
        - –°—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        - –ï—Å–ª–∏ >= 10 ‚Äî –∑–∞–ø—É—Å–∫–∞–µ—Ç retrain_model_from_feedback()

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–∞–∫ —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –∏–ª–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ feedback_api.

    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
        >>> check_and_retrain()  # –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
        - –ü–æ—Ä–æ–≥ (10) –º–æ–∂–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ config.py
        - –§—É–Ω–∫—Ü–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Äî –∫–∞–∂–¥—ã–π —Ä–∞–∑ —á–∏—Ç–∞–µ—Ç —Ñ–∞–π–ª
        - –û—à–∏–±–∫–∏ –ª–æ–≥–∏—Ä—É—é—Ç—Å—è –≤ –∫–æ–Ω—Å–æ–ª—å
    """
    feedback_file = DATA_DIR / "feedback.jsonl"
    if not feedback_file.exists():
        return

    try:
        lines = feedback_file.read_text(
            encoding="utf-8"
        ).strip().split("\n"
                                            )
        lines = [l for l in lines if l.strip()]
    except Exception as e:
        logger.critical(
            f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è feedback.jsonl: {e}"
        )
        return

    threshold = 10  # –ø–æ—Ä–æ–≥ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è
    if len(lines) >= threshold:
        logger.info(
            f"üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–æ–±—É—á–µ–Ω–∏–µ: {len(lines)} —Ñ–∏–¥–±—ç–∫–æ–≤"
        )
        try:
            from app.services.retrain import retrain_model_from_feedback
            result = retrain_model_from_feedback()
            logger.info(
                f"‚úÖ –ê–≤—Ç–æ-–¥–æ–æ–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–æ—á–Ω–æ—Å—Ç—å: "
                f"{result['accuracy_on_feedback']:.3f}"
            )
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ-–¥–æ–æ–±—É—á–µ–Ω–∏—è: {e}")
