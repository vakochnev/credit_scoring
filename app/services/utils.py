# app/services/utils.py
"""
–ú–æ–¥—É–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π

–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç:
- –ó–∞–≥—Ä—É–∑–∫—É –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏ (VotingClassifier)
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞
- –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é SHAP
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—é –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ–±—ä—è—Å–Ω–µ–Ω–∏–π

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
- –ü–æ–¥–¥–µ—Ä–∂–∫–∞ VotingClassifier —á–µ—Ä–µ–∑ callable-–æ–±—ë—Ä—Ç–∫—É
- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è waterfall-–≥—Ä–∞—Ñ–∏–∫–∞ SHAP
- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è PDF-–æ—Ç—á—ë—Ç–æ–≤

–ê–≤—Ç–æ—Ä: [–ö–æ—á–Ω–µ–≤–∞ –ê—Ä–∏–Ω–∞]
–ì–æ–¥: 2025
"""

from pathlib import Path
import joblib
import pandas as pd
import numpy as np
import shap
import matplotlib.pyplot as plt
import base64
from io import BytesIO
import logging

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from shared.data_processing import preprocess_data_for_prediction
from shared.config import (
    ENSEMBLE_MODEL_PATH,
    FEATURE_NAMES_PATH,
    BACKGROUND_DATA_PATH
)


logger = logging.getLogger(__name__)


# --- üß† –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è ---
"""
–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Ñ–∏—á–µ–π –∏ background_data
–¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤.
–ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ.
"""
_model = None
_feature_names = None
_background_data = None


def _load_model():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å, –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏—á–µ–π –∏ background_data –æ–¥–∏–Ω
    —Ä–∞–∑ –∏ –∫—ç—à–∏—Ä—É–µ—Ç –∏—Ö.

    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Singleton: –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–∞—Ö –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç
    –∑–∞–∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.

    Returns:
        tuple: (model, feature_names, background_data)

    Raises:
        FileNotFoundError: –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏

    –ü—Ä–∏–º–µ—á–∞–Ω–∏—è:
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è
        - –ü—É—Ç–∏ –∑–∞–¥–∞—é—Ç—Å—è –≤ shared/config.py
    """
    global _model, _feature_names, _background_data

    if _model is None:
        try:
            logger.info(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏: {ENSEMBLE_MODEL_PATH}")
            _model = joblib.load(ENSEMBLE_MODEL_PATH)

            logger.info(
                f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Ñ–∏—á–µ–π: {FEATURE_NAMES_PATH}"
            )
            _feature_names = joblib.load(FEATURE_NAMES_PATH)

            logger.info(
                f"üì• –ó–∞–≥—Ä—É–∑–∫–∞ background_data: {BACKGROUND_DATA_PATH}"
            )
            _background_data = joblib.load(BACKGROUND_DATA_PATH)

            logger.info(
                f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {_model.__class__.__name__}"
            )

        except FileNotFoundError as e:
            raise FileNotFoundError(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")
        except Exception as e:
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")

    return _model, _feature_names, _background_data


def predict_loan_status(input_df: pd.DataFrame) -> dict:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π
    –º–æ–¥–µ–ª–∏.

    Args:
        input_df (pd.DataFrame): –í—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–¥–Ω–æ–≥–æ –∑–∞–µ–º—â–∏–∫–∞

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞:
            {
                "prediction": 0 –∏–ª–∏ 1,
                "probability_repaid": float,
                "probability_default": float
            }

    Raises:
        ValueError: –ï—Å–ª–∏ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è

    –ü—Ä–∏–º–µ—Ä:
        >>> input_df = pd.DataFrame([{
        ...     "person_age": 35,
        ...     "person_income": 75000,
        ...     ...
        ... }])
        >>> result = predict_loan_status(input_df)
        >>> print(result)
        {
            'prediction': 0,
            'probability_repaid': 0.92,
            'probability_default': 0.08
        }
    """
    try:
        model, feature_names, _ = _load_model()

        # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        input_processed = preprocess_data_for_prediction(input_df)
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
        input_processed = input_processed[feature_names]

        # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        pred = model.predict(input_processed)[0]
        proba = model.predict_proba(input_processed)[0]

        return {
            "prediction": int(pred),
            "probability_repaid": float(proba[0]),
            "probability_default": float(proba[1])
        }

    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–∏: {str(e)}")


def explain_prediction(input_data: dict) -> dict:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
    —Å –ø–æ–º–æ—â—å—é SHAP.

    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞–Ω—Å–∞–º–±–ª—å (VotingClassifier) —á–µ—Ä–µ–∑ —Å–æ–∑–¥–∞–Ω–∏–µ
    callable-–æ–±—ë—Ä—Ç–∫–∏.

    Args:
        input_data (dict): –î–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ª–æ–≤–∞—Ä—è

    Returns:
        dict: –ü–æ–ª–Ω–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ:
            {
                "prediction": int,
                "status": str,
                "decision": str,
                "probability_repaid": float,
                "explanation": {
                    "base_value": float,
                    "shap_values": [{"feature": str, "value": float}],
                    "summary": [str],
                    "shap_image_base64": str,
                    "shap_image_path": str
                }
            }

    Raises:
        ValueError: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–ª–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞

    –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç shap.Explainer —Å callable-–æ–±—ë—Ä—Ç–∫–æ–π
        - –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç waterfall-–≥—Ä–∞—Ñ–∏–∫
        - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è PDF-–æ—Ç—á—ë—Ç–æ–≤
        - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç top-5 –Ω–∞–∏–±–æ–ª–µ–µ –≤–∞–∂–Ω—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
    """
    try:
        # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
        model, feature_names, background_data = _load_model()

        # 2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        input_df = pd.DataFrame([input_data])
        input_processed = preprocess_data_for_prediction(input_df)
        input_processed = input_processed[feature_names]

        # 3. –°–æ–∑–¥–∞–Ω–∏–µ callable-–æ–±—ë—Ä—Ç–∫–∏ –¥–ª—è –∞–Ω—Å–∞–º–±–ª—è
        def model_predict_proba(X):
            """
            –û–±—ë—Ä—Ç–∫–∞, –ø—Ä–µ–æ–±—Ä–∞–∑—É—é—â–∞—è VotingClassifier –≤ –≤—ã–∑—ã–≤–∞–µ–º—É—é
            —Ñ—É–Ω–∫—Ü–∏—é.
            –¢—Ä–µ–±—É–µ—Ç—Å—è, —Ç–∞–∫ –∫–∞–∫ SHAP –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç VotingClassifier
            –Ω–∞–ø—Ä—è–º—É—é.
            """
            if isinstance(X, np.ndarray):
                X = pd.DataFrame(X, columns=feature_names)
            return model.predict_proba(X)

        # 4. –°–æ–∑–¥–∞–Ω–∏–µ SHAP Explainer
        explainer = shap.Explainer(
            model_predict_proba,
            background_data
        )

        # 5. –ü–æ–ª—É—á–µ–Ω–∏–µ SHAP –∑–Ω–∞—á–µ–Ω–∏–π
        shap_values = explainer(input_processed)

        # 6. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–ª–∞—Å—Å–∞ "–¥–µ—Ñ–æ–ª—Ç" (1)
        if len(shap_values.output_names) == 2:
            shap_vals = shap_values.values[:, :, 1].flatten()
            base_value = float(shap_values.base_values[0][1])
        else:
            shap_vals = shap_values.values.flatten()
            base_value = float(shap_values.base_values[0])

        # 7. –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ
        prediction = model.predict(input_processed)[0]
        prediction_proba = model.predict_proba(input_processed)[0]

        # 8. –¢–æ–ø-5 –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –ø–æ –∞–±—Å–æ–ª—é—Ç–Ω–æ–º—É –≤–∫–ª–∞–¥—É
        top_features = sorted(
            zip(feature_names, shap_vals),
            key=lambda x: abs(x[1]),
            reverse=True
        )[:5]

        # 9. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è waterfall-–≥—Ä–∞—Ñ–∏–∫–∞
        fig, ax = plt.subplots(figsize=(8, 6))
        try:
            shap.waterfall_plot(
                shap.Explanation(
                    values=shap_vals,
                    base_values=base_value,
                    data=input_processed.iloc[0],
                    feature_names=feature_names
                ),
                show=False
            )
        except Exception as e:
            plt.close(fig)
            raise ValueError(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ waterfall: {str(e)}"
            )

        # 10. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ base64 (–¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ PDF)
        buf = BytesIO()
        fig.savefig(
            buf,
            format='png',
            bbox_inches='tight',
            dpi=150,
            facecolor='white'
        )
        buf.seek(0)
        image_base64 = base64.b64encode(buf.read()).decode('utf-8')
        plt.close(fig)

        # 11. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –¥–∏—Å–∫ (–¥–ª—è –æ—Ç—á—ë—Ç–æ–≤)
        images_dir = Path("reports/images")
        images_dir.mkdir(exist_ok=True)
        img_path = images_dir / "shap_waterfall.png"
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        fig, ax = plt.subplots(figsize=(8, 6))
        shap.waterfall_plot(
            shap.Explanation(
                values=shap_vals,
                base_values=base_value,
                data=input_processed.iloc[0],
                feature_names=feature_names
            ),
            show=False
        )
        fig.savefig(
            img_path,
            format='png',
            bbox_inches='tight',
            dpi=150,
            facecolor='white'
        )
        plt.close(fig)

        # 12. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        return {
            "prediction": int(prediction),
            "status": "repaid" if prediction == 0 else "default",
            "decision": "approve" if prediction == 0 else "reject",
            "probability_repaid": float(prediction_proba[0]),
            "probability_default": float(prediction_proba[1]),
            "explanation": {
                "base_value": base_value,
                "shap_values": [
                    {"feature": name, "value": float(val)}
                    for name, val in top_features
                ],
                "summary": [
                    f"{name}: {'‚Üë —Ä–∏—Å–∫' if val > 0 else '‚Üì —Ä–∏—Å–∫'} ({val:+.3f})"
                    for name, val in top_features
                ],
                "shap_image_base64": image_base64,
                "shap_image_path": "images/shap_waterfall.png"
            }
        }

    except Exception as e:
        raise ValueError(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–∏: {str(e)}")
