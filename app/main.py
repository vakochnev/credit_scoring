# app/main.py
"""
Credit Scoring API ‚Äî –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å FastAPI

–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç RESTful API –¥–ª—è –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∏—Å–∫–∞ –¥–µ—Ñ–æ–ª—Ç–∞
- –û–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏–π —Å SHAP
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á—ë—Ç–æ–≤
- –î–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
- –°—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- FastAPI: –æ—Å–Ω–æ–≤–∞ API
- –ê–Ω—Å–∞–º–±–ª–µ–≤–∞—è –º–æ–¥–µ–ª—å (RandomForest + XGBoost + CatBoost)
- SHAP: –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å
- WeasyPrint: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è PDF
- JSONL: —Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∏–¥–±—ç–∫–æ–≤

–ê–≤—Ç–æ—Ä: [–í–∞—à–µ –∏–º—è]
–ì–æ–¥: 2025
"""

import json
import logging
from pathlib import Path
import pandas as pd
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã
from shared.auth import verify_credentials
from shared.data_processing import preprocess_data
from shared.config import DATA_SOURCE, HOST, PORT
from shared.models import LoanRequest, FeedbackRequest
from services.model_comparison import (
    compare_models, generate_roc_auc_plot
)
from services.reporting import (
    generate_model_comparison_pdf, generate_explanation_pdf
)
from services.model_training import train_ensemble_model
from app.services.retrain import retrain_model_from_feedback
from app.services.utils import explain_prediction, predict_loan_status


# --- üìù –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
"""
–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è:
- –§–∏–∫—Å–∞—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ API
- –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è –∏ –¥–æ–æ–±—É—á–µ–Ω–∏—è
- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ—à–∏–±–æ–∫ –∏ —Ñ–∏–¥–±—ç–∫–æ–≤
–§–∞–π–ª: credit_scoring.log
"""
logging.basicConfig(
    filename='credit_scoring.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)


# --- üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
"""
–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–û–∂–∏–¥–∞–µ—Ç—Å—è CSV-—Ñ–∞–π–ª —Å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –ø–æ –∫—Ä–µ–¥–∏—Ç–∞–º.
–ü—É—Ç—å –∑–∞–¥–∞—ë—Ç—Å—è –≤ shared/config.py
"""
data_path = DATA_SOURCE
try:
    df = pd.read_csv(data_path)
    logging.info(
        f"–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {df.shape[0]} —Å—Ç—Ä–æ–∫, "
        f"{df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫"
    )
except Exception as e:
    logging.critical(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}")
    raise


# --- üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI ---
"""
FastAPI ‚Äî —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è API.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç:
- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é (Swagger/OpenAPI)
- –í–∞–ª–∏–¥–∞—Ü–∏—é Pydantic
- CORS
- –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
"""
app = FastAPI(
    dependencies=[Depends(verify_credentials)],
    description='API –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞',
    title='Credit Scoring API',
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)


# --- üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS ---
"""
–†–∞–∑—Ä–µ—à–∞–µ–º –¥–æ—Å—Ç—É–ø —Å–æ –≤—Å–µ—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.
–í production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –¥–æ–º–µ–Ω—ã.
"""
app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_credentials=True,
    allow_methods=['*'],
    allow_headers=['*'],
)


# --- üì• –•—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ---
"""
feedback_data ‚Äî –≤—Ä–µ–º–µ–Ω–Ω—ã–π –±—É—Ñ–µ—Ä –≤ –ø–∞–º—è—Ç–∏.
FEEDBACK_FILE ‚Äî –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSONL 
(–æ–¥–∏–Ω JSON –Ω–∞ —Å—Ç—Ä–æ–∫—É).
"""
feedback_data = []
FEEDBACK_FILE = Path("data/feedback.jsonl")


# --- üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–¥–±—ç–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ ---
def load_feedback():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ —Ñ–∏–¥–±—ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ API.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.

    –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ:
        - –§–æ—Ä–º–∞—Ç: JSONL (–æ–¥–∏–Ω JSON-–æ–±—ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–æ–∫—É)
        - –ö–æ–¥–∏—Ä–æ–≤–∫–∞: UTF-8 (–¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã)
    """
    global feedback_data
    if FEEDBACK_FILE.exists():
        try:
            with open(FEEDBACK_FILE, "r", encoding="utf-8") as f:
                for line in f:
                    if line.strip():
                        feedback_data.append(json.loads(line))
            logging.info(
                f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(feedback_data)} "
                f"–∑–∞–ø–∏—Å–µ–π –∏–∑ feedback.jsonl"
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ feedback: {e}")


# –í—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_feedback()


# --- üì° –≠–Ω–¥–ø–æ–∏–Ω—Ç—ã API ---

@app.get(
    path="/",
    dependencies=[Depends(verify_credentials)]
)
def read_root():
    """
    –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞.

    Returns:
        dict: –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Credit Scoring API"}


@app.post(
    path="/train-final",
    dependencies=[Depends(verify_credentials)]
)
def train_final_api():
    """
    –û–±—É—á–∞–µ—Ç –∞–Ω—Å–∞–º–±–ª–µ–≤—É—é –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.

    –≠—Ç–∞–ø—ã:
        1. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö (OHE, feature engineering)
        2. –û–±—É—á–µ–Ω–∏–µ VotingClassifier (RF + XGBoost + CatBoost)
        3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏, —Ñ–∏—á–µ–π –∏ background_data

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—É—á–µ–Ω–∏—è (–º–æ–¥–µ–ª—å, —Ç–æ—á–Ω–æ—Å—Ç—å)
    """
    X, y = preprocess_data(df.copy())
    result = train_ensemble_model(X, y)
    logging.info(
        f"–ê–Ω—Å–∞–º–±–ª—å –æ–±—É—á–µ–Ω. –¢–æ—á–Ω–æ—Å—Ç—å: {result['accuracy']:.3f}"
    )
    return result


@app.post(
    path="/predict",
    dependencies=[Depends(verify_credentials)]
)
def predict_api(request: LoanRequest):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≥–Ω–æ–∑ —Å—Ç–∞—Ç—É—Å–∞ –∫—Ä–µ–¥–∏—Ç–∞.

    Args:
        request (LoanRequest): –î–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞

    Returns:
        dict: –ü—Ä–æ–≥–Ω–æ–∑, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏, —Ä–µ—à–µ–Ω–∏–µ
    """
    input_df = pd.DataFrame([request.model_dump()])
    result = predict_loan_status(input_df)
    return {
        "prediction": result["prediction"],
        "status": "repaid" if result["prediction"] == 0 else "default",
        "decision": "approve" if result["prediction"] == 0 else "reject",
        "probability_repaid": result["probability_repaid"],
        "probability_default": result["probability_default"]
    }


@app.post(
    path="/explain",
    dependencies=[Depends(verify_credentials)]
)
def explain_api(request: LoanRequest):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è —Å –ø–æ–º–æ—â—å—é SHAP.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π Explainer –¥–ª—è –∞–Ω—Å–∞–º–±–ª–µ–≤–æ–π –º–æ–¥–µ–ª–∏.

    Args:
        request (LoanRequest): –î–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞

    Returns:
        dict: –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Å SHAP-–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏ base_value
    """
    result = explain_prediction(request.model_dump())
    return result


@app.post(
    path="/report",
    dependencies=[Depends(verify_credentials)]
)
def generate_report(request: LoanRequest):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç —Å –ø–æ–ª–Ω—ã–º –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º —Ä–µ—à–µ–Ω–∏—è.

    –û—Ç—á—ë—Ç –≤–∫–ª—é—á–∞–µ—Ç:
        - –î–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞
        - –†–µ—à–µ–Ω–∏–µ –∏ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
        - –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
        - –ì—Ä–∞—Ñ–∏–∫ SHAP waterfall

    Args:
        request (LoanRequest): –î–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞

    Returns:
        dict: –ü—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É
    """
    try:
        result = explain_prediction(request.model_dump())
        pdf_path = generate_explanation_pdf(
            request.model_dump(),
            result
        )
        logging.info(f"PDF-–æ—Ç—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {pdf_path}")
        return {"report_path": pdf_path}
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}"
        )


@app.post(
    path='/feedback',
    dependencies=[Depends(verify_credentials)]
)
def feedback_api(request: FeedbackRequest):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ –∫—Ä–µ–¥–∏—Ç–∞.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏.

    Args:
        request (FeedbackRequest):
            –î–∞–Ω–Ω—ã–µ + predicted_status + actual_status

    Returns:
        dict: –°—Ç–∞—Ç—É—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    try:
        feedback_entry = request.model_dump()
        feedback_data.append(feedback_entry)

        FEEDBACK_FILE.parent.mkdir(exist_ok=True)
        with open(FEEDBACK_FILE, "a", encoding="utf-8") as f:
            f.write(
                json.dumps(
                    feedback_entry,
                    ensure_ascii=False
                ) + "\n"
            )

        logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∏–¥–±—ç–∫: {feedback_entry}")
        return {
            "status": "success",
            "message": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"
        }

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–¥–±—ç–∫–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
        )


@app.post(
    path="/retrain",
    dependencies=[Depends(verify_credentials)]
)
def retrain_api():
    """
    –î–æ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–¥–±—ç–∫–æ–≤.

    –ü—Ä–æ—Ü–µ—Å—Å:
        1. –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–¥–±—ç–∫–æ–≤
        2. –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞
        3. –î–æ–æ–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è
        4. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ–æ–±—É—á–µ–Ω–∏—è
    """
    try:
        result = retrain_model_from_feedback()
        logging.info(
            f"–ú–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞. –¢–æ—á–Ω–æ—Å—Ç—å –Ω–∞ —Ñ–∏–¥–±—ç–∫–∞—Ö: "
            f"{result['accuracy_on_feedback']:.3f}"
        )
        return result
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏: {str(e)}"
        )


@app.get(
    path="/compare",
    dependencies=[Depends(verify_credentials)]
)
def compare_models_api():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–µ–π.

    –û–±—É—á–∞–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–¥–µ–ª–µ–π (RF, XGBoost, CatBoost, Ensemble)
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Ö —Ç–æ—á–Ω–æ—Å—Ç—å.

    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    """
    X, y = preprocess_data(df.copy())
    result = compare_models(X, y)
    return {"models": result["results"]}


@app.post(
    path="/generate-comparison-report",
    dependencies=[Depends(verify_credentials)]
)
def generate_comparison_report():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π.

    –í–∫–ª—é—á–∞–µ—Ç:
        - –¢–∞–±–ª–∏—Ü—É –º–µ—Ç—Ä–∏–∫
        - ROC-AUC –≥—Ä–∞—Ñ–∏–∫
        - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–æ–¥–µ–ª—è—Ö

    Returns:
        dict: –ü—É—Ç—å –∫ PDF-—Ñ–∞–π–ª—É
    """
    try:
        X, y = preprocess_data(df.copy())
        result = compare_models(X, y)

        roc_path = generate_roc_auc_plot(
            result["X_test"],
            result["y_test"],
            result["trained_models"]
        )

        pdf_path = generate_model_comparison_pdf(
            result["results"],
            roc_path
        )

        logging.info(
            f"–û—Ç—á—ë—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {pdf_path}"
        )
        return {"report_path": pdf_path}

    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}"
        )


# --- ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
if __name__ == "__main__":
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

    –ó–∞–ø—É—Å–∫–∞–µ—Ç Uvicorn-—Å–µ—Ä–≤–µ—Ä —Å FastAPI.
    –•–æ—Å—Ç –∏ –ø–æ—Ä—Ç –∑–∞–¥–∞—é—Ç—Å—è –≤ shared/config.py
    """
    uvicorn.run(app, host=HOST, port=PORT)
