from sklearn.model_selection import train_test_split

from app.services.utils import explain_prediction, predict_loan_status
from services.model_comparison import compare_models #, generate_comparison_plot
from services.reporting import generate_model_comparison_pdf

import json
import logging
from pathlib import Path
import pandas as pd
from fastapi import FastAPI, HTTPException, Depends
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
from shared.auth import verify_credentials
from shared.data_processing import (
    preprocess_data
)
from services.model_training import (
    train_ensemble_model
)
from services.utils import explain_prediction
from services.reporting import generate_explanation_pdf
from shared.config import DATA_SOURCE, HOST, PORT
from app.services.retrain import retrain_model_from_feedback
from shared.models import LoanRequest, FeedbackRequest  # ‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±–µ –º–æ–¥–µ–ª–∏


# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    filename='credit_scoring.log',
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
data_path = DATA_SOURCE
df = pd.read_csv(data_path)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    dependencies=[Depends(verify_credentials)],
    description='API –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞',
    title='Credit Scoring API',
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    openapi_url="/openapi.json"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=['*'],
    allow_credentials=True,
    allow_methods=['*'],
    allow_headers=['*'],
)

# üì¶ –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ñ–∏–¥–±—ç–∫–æ–≤
feedback_data = []

# üìÅ –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ñ–∏–¥–±—ç–∫–∞–º–∏
FEEDBACK_FILE = Path("data/feedback.jsonl")


# üîÅ –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∏–¥–±—ç–∫–æ–≤ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
def load_feedback():
    global feedback_data
    if FEEDBACK_FILE.exists():
        try:
            with open(FEEDBACK_FILE, "r", encoding="utf-8") as f:
                for line in f:
                    if line.strip():
                        feedback_data.append(json.loads(line))
            logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(feedback_data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ feedback.jsonl")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ feedback: {e}")

# –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_feedback()


@app.get(path="/", dependencies=[Depends(verify_credentials)])
def read_root():
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Credit Scoring API"}


@app.post(path="/train-final", dependencies=[Depends(verify_credentials)])
def train_final_api():
    X, y = preprocess_data(df.copy())
    result = train_ensemble_model(X, y)
    return result


@app.post(path="/predict", dependencies=[Depends(verify_credentials)])
def predict_api(request: LoanRequest):
    input_df = pd.DataFrame([request.model_dump()])
    result = predict_loan_status(input_df)
    return {
        "prediction": result["prediction"],
        "status": "repaid" if result["prediction"] == 0 else "default",
        "decision": "approve" if result["prediction"] == 0 else "reject",
        "probability_repaid": result["probability_repaid"],
        "probability_default": result["probability_default"]
    }


@app.post(path="/explain", dependencies=[Depends(verify_credentials)])
def explain_api(request: LoanRequest):
    result = explain_prediction(request.model_dump())
    return result


@app.post(path="/report", dependencies=[Depends(verify_credentials)])
def generate_report(request: LoanRequest):
    try:
        result = explain_prediction(request.model_dump())
        pdf_path = generate_explanation_pdf(request.model_dump(), result)
        return {"report_path": pdf_path}
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}"
        )


@app.post(path='/feedback', dependencies=[Depends(verify_credentials)])
def feedback_api(request: FeedbackRequest):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –æ —Ä–µ–∞–ª—å–Ω–æ–º —Å—Ç–∞—Ç—É—Å–µ –∫—Ä–µ–¥–∏—Ç–∞.
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ —Å–ø–∏—Å–æ–∫ –∏ –≤ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSONL.
    """
    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
        feedback_entry = request.model_dump()

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ø–∏—Å–æ–∫
        feedback_data.append(feedback_entry)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª (append mode)
        FEEDBACK_FILE.parent.mkdir(exist_ok=True)
        with open(FEEDBACK_FILE, "a", encoding="utf-8") as f:
            f.write(json.dumps(feedback_entry, ensure_ascii=False) + "\n")

        logging.info(f"–°–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∏–¥–±—ç–∫: {feedback_entry}")
        return {"status": "success", "message": "–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞"}

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∏–¥–±—ç–∫–∞: {e}")
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {str(e)}"
        )


# ‚úÖ –î–æ–±–∞–≤—å—Ç–µ –∑–¥–µ—Å—å:
@app.post(path="/retrain", dependencies=[Depends(verify_credentials)])
def retrain_api():
    """
    –ü–µ—Ä–µ–æ–±—É—á–∞–µ—Ç –º–æ–¥–µ–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∏–¥–±—ç–∫–æ–≤.
    """
    try:
        result = retrain_model_from_feedback()
        return result
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–æ–±—É—á–µ–Ω–∏–∏: {str(e)}"
        )


@app.get(path="/compare", dependencies=[Depends(verify_credentials)])
def compare_models_api():
    """
    –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª–∏: –æ–±—É—á–∞–µ—Ç, –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
    """
    from shared.data_processing import preprocess_data
    from services.model_comparison import compare_models

    X, y = preprocess_data(df.copy())
    result = compare_models(X, y)
    return {"models": result["results"]}

@app.post(path="/generate-comparison-report", dependencies=[Depends(verify_credentials)])
def generate_comparison_report():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç —Å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ–º –º–æ–¥–µ–ª–µ–π –∏ ROC-AUC –≥—Ä–∞—Ñ–∏–∫–æ–º.
    """
    try:
        from shared.data_processing import preprocess_data
        from services.model_comparison import compare_models, generate_roc_auc_plot
        from services.reporting import generate_model_comparison_pdf

        X, y = preprocess_data(df.copy())
        result = compare_models(X, y)

        roc_path = generate_roc_auc_plot(
            result["X_test"],
            result["y_test"],
            result["trained_models"]
        )

        pdf_path = generate_model_comparison_pdf(result["results"], roc_path)
        return {"report_path": pdf_path}

    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {str(e)}")



if __name__ == "__main__":
    uvicorn.run(app, host=HOST, port=PORT)