# frontend/app.py
"""
Frontend-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –∫—Ä–µ–¥–∏—Ç–Ω–æ–≥–æ —Å–∫–æ—Ä–∏–Ω–≥–∞

–ú–æ–¥—É–ª—å —Ä–µ–∞–ª–∏–∑—É–µ—Ç –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ Streamlit –¥–ª—è:
- –í–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–µ–º—â–∏–∫–∞
- –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è —Ä–µ—à–µ–Ω–∏—è
- –ì–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF-–æ—Ç—á—ë—Ç–æ–≤
- –°—Ä–∞–≤–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–µ–π
- –°–±–æ—Ä–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
- –î–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏

–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
- Frontend: Streamlit
- Backend: FastAPI (—á–µ—Ä–µ–∑ HTTP-–∑–∞–ø—Ä–æ—Å—ã)
- –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å: SHAP
- –û—Ç—á—ë—Ç—ã: WeasyPrint + Jinja2

–ê–≤—Ç–æ—Ä: [–ö–æ—á–Ω–µ–≤–∞ –ê—Ä–∏–Ω–∞]
–ì–æ–¥: 2025
"""

import os
import sys
from pathlib import Path
import streamlit as st
import requests
import pandas as pd
import joblib


# --- üß≠ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–∏ –∫ –∫–æ—Ä–Ω—é –ø—Ä–æ–µ–∫—Ç–∞ ---
# –î–æ–±–∞–≤–ª—è–µ—Ç –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª–∏
# –∏–∑ app/, shared/, services/ –±–µ–∑ –æ—à–∏–±–æ–∫.

# frontend/.. ‚Üí credit_scoring/
root_dir = Path(__file__).parent.parent
if str(root_dir) not in sys.path:
    sys.path.insert(0, str(root_dir))


# --- üîó –ò–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã ---
from shared.data_processing import preprocess_data_for_prediction
from shared.config import (
    API_BASE_URL,
    API_AUTH,
    REPORT_PATH,
    BACKGROUND_DATA_PATH,
    ENSEMBLE_MODEL_PATH
)
from shared.models import LoanRequest


# --- üñºÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã Streamlit ---
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:
# - –ó–∞–≥–æ–ª–æ–≤–æ–∫: "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥"
# - –ú–∞–∫–µ—Ç: —à–∏—Ä–æ–∫–∏–π (wide)
# - –ò–∫–æ–Ω–∫–∞: üí≥
st.set_page_config(
    page_title="–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥",
    layout="wide",
    page_icon="üí≥"
)


# --- üîê –ú–µ—Ö–∞–Ω–∏–∑–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ ---
def check_password():
    """
    –†–µ–∞–ª–∏–∑—É–µ—Ç –ø—Ä–æ—Å—Ç—É—é —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç st.session_state –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.
    –ü—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –≤—Ö–æ–¥–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É.

    Returns:
        bool: True ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, False ‚Äî –Ω–µ—Ç
    """
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False

    if not st.session_state.authenticated:
        st.subheader("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        username = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        if st.button("–í–æ–π—Ç–∏"):
            if username == API_AUTH[0] and password == API_AUTH[1]:
                st.session_state.authenticated = True
                st.rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        return False
    return True


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
if not check_password():
    st.stop()


# --- üåê API-—Ö–µ–ª–ø–µ—Ä—ã (–≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤) ---
def explain_request(data):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç POST-–∑–∞–ø—Ä–æ—Å –∫ /explain –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –∏
    –æ–±—ä—è—Å–Ω–µ–Ω–∏—è.

    Args:
        data (dict): –î–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞

    Returns:
        requests.Response: –û—Ç–≤–µ—Ç –æ—Ç FastAPI
    """
    return requests.post(
        url=f"{API_BASE_URL}/explain",
        json=data,
        auth=API_AUTH
    )


def generate_report(data):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç —á–µ—Ä–µ–∑ /report.

    Args:
        data (dict): –î–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞

    Returns:
        requests.Response: –û—Ç–≤–µ—Ç —Å –ø—É—Ç—ë–º –∫ PDF
    """
    return requests.post(
        url=f"{API_BASE_URL}/report",
        json=data,
        auth=API_AUTH
    )


def compare_models():
    """
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π —á–µ—Ä–µ–∑ /compare.

    Returns:
        requests.Response: –°–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π –∏ –∏—Ö –º–µ—Ç—Ä–∏–∫
    """
    return requests.get(
        url=f"{API_BASE_URL}/compare",
        auth=API_AUTH
    )


def generate_comparison_report():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF-–æ—Ç—á—ë—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –º–æ–¥–µ–ª–µ–π.

    Returns:
        requests.Response: –ü—É—Ç—å –∫ PDF
    """
    return requests.post(
        url=f"{API_BASE_URL}/generate-comparison-report",
        auth=API_AUTH
    )


# --- üß† –ó–∞–≥—Ä—É–∑–∫–∞ background_data –¥–ª—è SHAP ---
@st.cache_resource
def load_background_data():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç background_data.pkl –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è SHAP-–≥—Ä–∞—Ñ–∏–∫–æ–≤.

    –ö—ç—à–∏—Ä—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –Ω–µ –∑–∞–≥—Ä—É–∂–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –¥–µ–π—Å—Ç–≤–∏–∏.

    Returns:
        pd.DataFrame or None: –§–æ–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    try:
        return joblib.load(BACKGROUND_DATA_PATH)
    except Exception as e:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å background_data.pkl")
        return None


background_data = load_background_data()


# --- üìë –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –≤–∫–ª–∞–¥–∫–∏ ---
tab1, tab2, tab3 = st.tabs([
    "üîç –ü—Ä–æ–≥–Ω–æ–∑ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
    "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π",
    "üîÑ –î–æ–æ–±—É—á–µ–Ω–∏–µ"
])


# === –í–ö–õ–ê–î–ö–ê 1: –ü—Ä–æ–≥–Ω–æ–∑ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ ===
with tab1:
    st.subheader("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞")

    col1, col2 = st.columns(2)
    with col1:
        person_age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", 18, 100, 35)
        person_income = st.number_input(
            "–î–æ—Ö–æ–¥", 10_000, 1_000_000, 75_000
        )
        person_home_ownership = st.selectbox(
            "–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å",
            ["RENT", "OWN", "MORTGAGE", "OTHER"]
        )
        person_emp_length = st.number_input(
            "–°—Ç–∞–∂ (–ª–µ—Ç)", 0.0, 50.0, 5.0
        )
        loan_intent = st.selectbox("–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞", [
            "DEBTCONSOLIDATION", "EDUCATION", "HOMEIMPROVEMENT",
            "MEDICAL", "PERSONAL", "VENTURE"
        ])

    with col2:
        loan_grade = st.selectbox(
            "–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥",
            ["A", "B", "C", "D", "E", "F", "G"]
        )
        loan_amnt = st.number_input(
            "–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", 1_000, 100_000, 20_000
        )
        loan_int_rate = st.number_input(
            "–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞", 0.0, 100.0, 9.5
        )
        loan_percent_income = st.slider(
            "–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞", 0.0, 1.0, 0.27
        )
        cb_person_default_on_file = st.selectbox(
            "–ë—ã–ª –ª–∏ –¥–µ—Ñ–æ–ª—Ç", ["Y", "N"]
        )
        cb_person_cred_hist_length = st.number_input(
            "–î–ª–∏–Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏", 0, 50, 4
        )

    data = {
        "person_age": person_age,
        "person_income": person_income,
        "person_home_ownership": person_home_ownership,
        "person_emp_length": person_emp_length,
        "loan_intent": loan_intent,
        "loan_grade": loan_grade,
        "loan_amnt": loan_amnt,
        "loan_int_rate": loan_int_rate,
        "loan_percent_income": loan_percent_income,
        "cb_person_default_on_file": cb_person_default_on_file,
        "cb_person_cred_hist_length": cb_person_cred_hist_length
    }

    # --- üîÆ –ü—Ä–æ–≥–Ω–æ–∑ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ ---
    if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑..."):
            try:
                response = explain_request(data)
                if response.status_code == 200:
                    result = response.json()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ session_state
                    st.session_state['prediction_result'] = result
                    st.session_state['input_data'] = data

                    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π PDF
                    if 'pdf_generated' in st.session_state:
                        del st.session_state['pdf_generated']
                    if 'report_path' in st.session_state:
                        del st.session_state['report_path']

                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    decision = "‚úÖ –û–î–û–ë–†–ï–ù–û" if result["decision"] == "approve" else "‚ùå –û–¢–ö–ê–ó"
                    status = "–ö–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—ë—Ç –∫—Ä–µ–¥–∏—Ç" if result["status"] == "repaid" else "–†–∏—Å–∫ –¥–µ—Ñ–æ–ª—Ç–∞"
                    prob = result["probability_repaid"]

                    st.success(f"üìå –†–µ—à–µ–Ω–∏–µ: **{decision}**")
                    st.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
                    st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞", f"{prob:.1%}")

                    # –¢–µ–∫—Å—Ç–æ–≤–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ
                    st.subheader("üìù –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è")
                    for line in result["explanation"]["summary"]:
                        st.markdown(f"- {line.replace('‚Üë —Ä–∏—Å–∫', '‚¨ÜÔ∏è –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫').replace('‚Üì —Ä–∏—Å–∫', '‚¨áÔ∏è –ø–æ–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫')}")

                    # –ì—Ä–∞—Ñ–∏–∫ SHAP (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if "shap_image_base64" in result["explanation"]:
                        st.image(
                            f"data:image/png;base64,{result['explanation']['shap_image_base64']}",
                            caption="–í–∫–ª–∞–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (SHAP)",
                            width=1300
                        )

                else:
                    st.error(
                        f"‚ùå –û—à–∏–±–∫–∞ API: {response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    )

            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
                st.exception(e)

    # --- üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞ ---
    st.subheader("üìÑ –°–∫–∞—á–∞—Ç—å PDF-–æ—Ç—á—ë—Ç")
    if 'prediction_result' in st.session_state:
        if st.button("üì• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF..."):
                try:
                    input_data = st.session_state['input_data']
                    response = generate_report(input_data)
                    if response.status_code == 200:
                        report_path = response.json()["report_path"]
                        st.session_state['pdf_generated'] = True
                        st.session_state['report_path'] = report_path
                        st.success(f"‚úÖ –û—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: `{report_path}`")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.json().get('detail')}")
                except Exception as e:
                    st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç")
                    st.exception(e)

        # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ—Ç—á—ë—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω)
        if 'pdf_generated' in st.session_state and 'report_path' in st.session_state:
            report_path = st.session_state['report_path']
            if os.path.exists(report_path):
                with open(report_path, "rb") as f:
                    st.download_button(
                        "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF",
                        f,
                        file_name="credit_report.pdf",
                        mime="application/pdf",
                        key="download_pdf_button"
                    )
            else:
                st.error("‚ùå –§–∞–π–ª –æ—Ç—á—ë—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞.")
    else:
        st.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑, —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF.")

    # --- üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å ---
    st.markdown("---")
    st.subheader("üì© –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")

    if 'prediction_result' in st.session_state:
        actual_status = st.radio(
            "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –∫—Ä–µ–¥–∏—Ç–∞ (–ø–æ –∏—Ç–æ–≥–∞–º –≤—ã–ø–ª–∞—Ç—ã):",
            options=[("–ö–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª", 0), ("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª", 1)],
            format_func=lambda x: x[0]
        )

        if st.button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"):
            result = st.session_state['prediction_result']
            input_data = st.session_state['input_data']

            feedback_data = input_data.copy()
            feedback_data["predicted_status"] = result["prediction"]
            feedback_data["actual_status"] = actual_status[1] if isinstance(actual_status, tuple) else actual_status

            try:
                fb_response = requests.post(
                    f"{API_BASE_URL}/feedback",
                    json=feedback_data,
                    auth=API_AUTH
                )
                if fb_response.status_code == 200:
                    st.success(
                        "‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏"
                    )
                else:
                    st.error(
                        f"‚ùå –û—à–∏–±–∫–∞: {fb_response.json().get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}"
                    )
            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å")
                st.exception(e)
    else:
        st.info(
            "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å."
        )


# === –í–ö–õ–ê–î–ö–ê 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ===
with tab2:
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫..."):
            try:
                response = compare_models()
                if response.status_code == 200:
                    data = response.json()["models"]
                    df = pd.DataFrame(data)

                    st.dataframe(
                        df.style.format({"accuracy": "{:.3f}", "auc": "{:.3f}"}),
                        use_container_width=True
                    )

                    # –ë–∞—Ä—á–∞—Ä—Ç—ã
                    col1, col2 = st.columns(2)
                    with col1:
                        st.bar_chart(df.set_index("model")["accuracy"])
                    with col2:
                        st.bar_chart(df.set_index("model")["auc"])

                else:
                    st.warning("–ú–µ—Ç—Ä–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª–∏ —Å–Ω–∞—á–∞–ª–∞.")
            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                st.exception(e)

    # --- üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞ –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –º–æ–¥–µ–ª–µ–π ---
    st.markdown("---")
    st.subheader("üìÑ –û—Ç—á—ë—Ç –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é –º–æ–¥–µ–ª–µ–π")

    if st.button("üì• –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á—ë—Ç –ø–æ –º–æ–¥–µ–ª—è–º"):
        with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞..."):
            try:
                response = generate_comparison_report()
                if response.status_code == 200:
                    report_path = response.json()["report_path"]
                    st.success(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{report_path}`")
                    with open(report_path, "rb") as f:
                        st.download_button(
                            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF",
                            f,
                            file_name="model_comparison_report.pdf",
                            mime="application/pdf"
                        )
                else:
                    st.error(
                        f"‚ùå –û—à–∏–±–∫–∞: {response.json().get('detail')}"
                    )
            except Exception as e:
                st.error(
                    "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç"
                )
                st.exception(e)


# === –í–ö–õ–ê–î–ö–ê 3: –î–æ–æ–±—É—á–µ–Ω–∏–µ ===
with tab3:
    st.subheader("üîÑ –î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")

    # –û–±—É—á–µ–Ω–∏–µ –∞–Ω—Å–∞–º–±–ª—è
    if st.button("üéì –û–±—É—á–∏—Ç—å –∞–Ω—Å–∞–º–±–ª—å"):
        with st.spinner("–û–±—É—á–µ–Ω–∏–µ..."):
            try:
                response = requests.post(
                    url=f"{API_BASE_URL}/train-final",
                    auth=API_AUTH
                )
                if response.status_code == 200:
                    result = response.json()
                    st.success(
                        f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {result['model']}, "
                        f"—Ç–æ—á–Ω–æ—Å—Ç—å: {result['accuracy']:.3f}"
                    )
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
                st.exception(e)

    # –î–æ–æ–±—É—á–µ–Ω–∏–µ
    if st.button("üöÄ –î–æ–æ–±—É—á–∏—Ç—å –Ω–∞ —Ñ–∏–¥–±—ç–∫–∞—Ö"):
        with st.spinner("–î–æ–æ–±—É—á–µ–Ω–∏–µ..."):
            try:
                response = requests.post(
                    url=f"{API_BASE_URL}/retrain",
                    auth=API_AUTH
                )
                if response.status_code == 200:
                    result = response.json()
                    st.success("‚úÖ –ú–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞!")
                    st.json(result)
                else:
                    st.error(
                        f"‚ùå –û—à–∏–±–∫–∞: {response.json().get('detail')}"
                    )
            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–æ–±—É—á–∏—Ç—å")
                st.exception(e)


# --- üßæ –§—É—Ç–µ—Ä ---
st.markdown("---")
st.caption("–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥ ‚Äî –¥–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç | 2025")
