# frontend/app.py
import os
import sys
from pathlib import Path
import streamlit as st
import requests
import pandas as pd
import base64
from shared.config import API_BASE_URL, API_AUTH


# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
root_dir = Path(__file__).parent.parent
if str(root_dir) not in sys.path:
    sys.path.insert(0, str(root_dir))

def generate_report(data):
    return requests.post(
        url=f"{API_BASE_URL}/report",
        json=data,
        auth=API_AUTH
    )

# --- üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ---
def check_password():
    if "authenticated" not in st.session_state:
        st.session_state.authenticated = False

    if not st.session_state.authenticated:
        st.subheader("üîê –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        username = st.text_input("–õ–æ–≥–∏–Ω")
        password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password")
        if st.button("–í–æ–π—Ç–∏"):
            if username == API_AUTH[0] and password == API_AUTH[1]:
                st.session_state.authenticated = True
                st.rerun()
            else:
                st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")
        return False
    return True

if not check_password():
    st.stop()

# --- üé® –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(
    page_title="–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥",
    page_icon="üí≥",
    layout="wide"
)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
@st.cache_data
def load_data():
    try:
        response = requests.get(f"{API_BASE_URL}/compare", auth=API_AUTH)
        if response.status_code == 200:
            return response.json()["models"]
        else:
            return []
    except:
        return []

# --- –í–∫–ª–∞–¥–∫–∏ ---
tab1, tab2, tab3, tab4 = st.tabs([
    "üîç –ü—Ä–æ–≥–Ω–æ–∑ –∏ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ",
    "üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π",
    "üìÑ PDF-–æ—Ç—á—ë—Ç",
    "üîÑ –î–æ–æ–±—É—á–µ–Ω–∏–µ"
])

# === –í–ö–õ–ê–î–ö–ê 1: –ü—Ä–æ–≥–Ω–æ–∑ ===
with tab1:
    st.subheader("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–µ–º—â–∏–∫–∞")

    col1, col2 = st.columns(2)
    with col1:
        person_age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", 18, 100, 35)
        person_income = st.number_input("–î–æ—Ö–æ–¥", 10_000, 1_000_000, 75_000)
        person_home_ownership = st.selectbox("–°–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", ["RENT", "OWN", "MORTGAGE", "OTHER"])
        person_emp_length = st.number_input("–°—Ç–∞–∂ (–ª–µ—Ç)", 0.0, 50.0, 5.0)
        loan_intent = st.selectbox("–¶–µ–ª—å –∫—Ä–µ–¥–∏—Ç–∞", [
            "DEBTCONSOLIDATION", "EDUCATION", "HOMEIMPROVEMENT",
            "MEDICAL", "PERSONAL", "VENTURE"
        ])

    with col2:
        loan_grade = st.selectbox("–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥", ["A", "B", "C", "D", "E", "F", "G"])
        loan_amnt = st.number_input("–°—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞", 1_000, 100_000, 20_000)
        loan_int_rate = st.number_input("–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞", 0.0, 100.0, 9.5)
        loan_percent_income = st.slider("–ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ—Ö–æ–¥–∞", 0.0, 1.0, 0.27)
        cb_person_default_on_file = st.selectbox("–ë—ã–ª –ª–∏ –¥–µ—Ñ–æ–ª—Ç", ["Y", "N"])
        cb_person_cred_hist_length = st.number_input("–î–ª–∏–Ω–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏", 0, 50, 4)

    data = {
        "person_age": person_age,
        "person_income": person_income,
        "person_home_ownership": person_home_ownership,
        "person_emp_length": person_emp_length,
        "loan_intent": loan_intent,
        "loan_grade": loan_grade,
        "loan_amnt": loan_amnt,
        "loan_int_rate": loan_int_rate,
        "loan_percent_income": loan_percent_income,
        "cb_person_default_on_file": cb_person_default_on_file,
        "cb_person_cred_hist_length": cb_person_cred_hist_length
    }

    if st.button("üîÆ –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞—Ç—å –∏ –æ–±—ä—è—Å–Ω–∏—Ç—å"):
        with st.spinner("–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑..."):
            try:
                response = requests.post(f"{API_BASE_URL}/explain", json=data, auth=API_AUTH)
                if response.status_code == 200:
                    result = response.json()

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    st.session_state['prediction_result'] = result
                    st.session_state['input_data'] = data

                    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                    decision = "‚úÖ –û–î–û–ë–†–ï–ù–û" if result["decision"] == "approve" else "‚ùå –û–¢–ö–ê–ó"
                    status = "–ö–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—ë—Ç –∫—Ä–µ–¥–∏—Ç" if result["status"] == "repaid" else "–†–∏—Å–∫ –¥–µ—Ñ–æ–ª—Ç–∞"
                    prob = result["probability_repaid"]

                    st.success(f"üìå –†–µ—à–µ–Ω–∏–µ: **{decision}**")
                    st.info(f"üìä –°—Ç–∞—Ç—É—Å: {status}")
                    st.metric("–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–æ–∑–≤—Ä–∞—Ç–∞", f"{prob:.1%}")

                    # SHAP –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    st.subheader("üîç –û–±—ä—è—Å–Ω–µ–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è")
                    for line in result["explanation"]["summary"]:
                        st.markdown(f"- {line.replace('‚Üë —Ä–∏—Å–∫', '‚¨ÜÔ∏è –ø–æ–≤—ã—à–∞–µ—Ç —Ä–∏—Å–∫').replace('‚Üì —Ä–∏—Å–∫', '‚¨áÔ∏è –ø–æ–Ω–∏–∂–∞–µ—Ç —Ä–∏—Å–∫')}")

                    st.image(
                        f"data:image/png;base64,{result['explanation']['shap_image_base64']}",
                        caption="–í–∫–ª–∞–¥ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ (SHAP)",
                        use_column_width=True
                    )
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.json().get('detail')}")
            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
                st.exception(e)

# === –í–ö–õ–ê–î–ö–ê 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π ===
with tab2:
    st.subheader("üìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")

    if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ"):
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç—Ä–∏–∫..."):
            try:
                models = load_data()
                if models:
                    df = pd.DataFrame(models)
                    st.dataframe(df.style.format({"accuracy": "{:.3f}"}))
                    st.bar_chart(df.set_index("model")["accuracy"])
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –û–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª–∏ —Å–Ω–∞—á–∞–ª–∞.")
            except Exception as e:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
                st.exception(e)

# === –í–ö–õ–ê–î–ö–ê 3: PDF-–æ—Ç—á—ë—Ç ===
with tab3:
    st.subheader("üìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF-–æ—Ç—á—ë—Ç–∞")

    if 'input_data' in st.session_state and 'prediction_result' in st.session_state:
        if st.button("üì• –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PDF-–æ—Ç—á—ë—Ç"):
            with st.spinner("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF..."):
                try:
                    response = generate_report(data)
                    if response.status_code == 200:
                        report_info = response.json()
                        report_path = report_info["report_path"]

                        # üîç –ü—Ä–æ–≤–µ—Ä–∏–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
                        if not os.path.exists(report_path):
                            st.error(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {report_path}")
                            st.info("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –∏ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–Ω—É –ø–∞–ø–∫—É `reports`")
                        else:
                            st.success(f"‚úÖ –û—Ç—á—ë—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: `{report_path}`")

                            # ‚úÖ –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∫–∞–∫ –±–∞–π—Ç—ã
                            with open(report_path, "rb") as f:
                                st.download_button(
                                    "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å PDF",
                                    f,
                                    file_name="credit_report.pdf",
                                    mime="application/pdf"
                                )
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.json().get('detail')}")
                except Exception as e:
                    st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç")
                    st.exception(e)

# === –í–ö–õ–ê–î–ö–ê 4: –î–æ–æ–±—É—á–µ–Ω–∏–µ ===
with tab4:
    st.subheader("üîÑ –î–æ–æ–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏")

    # –ö–Ω–æ–ø–∫–∞ –æ–±—É—á–µ–Ω–∏—è –∞–Ω—Å–∞–º–±–ª—è
    if st.button("üéì –û–±—É—á–∏—Ç—å –∞–Ω—Å–∞–º–±–ª—å"):
        with st.spinner("–û–±—É—á–µ–Ω–∏–µ..."):
            try:
                response = requests.post(f"{API_BASE_URL}/train-final", auth=API_AUTH)
                if response.status_code == 200:
                    result = response.json()
                    st.success(f"‚úÖ –ú–æ–¥–µ–ª—å –æ–±—É—á–µ–Ω–∞: {result['model']}, —Ç–æ—á–Ω–æ—Å—Ç—å: {result['accuracy']:.3f}")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –æ–±—É—á–µ–Ω–∏—è")
            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—É—á–∏—Ç—å –º–æ–¥–µ–ª—å")
                st.exception(e)

    # –ö–Ω–æ–ø–∫–∞ –¥–æ–æ–±—É—á–µ–Ω–∏—è
    if st.button("üöÄ –î–æ–æ–±—É—á–∏—Ç—å –Ω–∞ —Ñ–∏–¥–±—ç–∫–∞—Ö"):
        with st.spinner("–î–æ–æ–±—É—á–µ–Ω–∏–µ..."):
            try:
                response = requests.post(f"{API_BASE_URL}/retrain", auth=API_AUTH)
                if response.status_code == 200:
                    result = response.json()
                    st.success("‚úÖ –ú–æ–¥–µ–ª—å –¥–æ–æ–±—É—á–µ–Ω–∞!")
                    st.json(result)
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {response.json().get('detail')}")
            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–æ–±—É—á–∏—Ç—å")
                st.exception(e)

    # –ë–ª–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
    st.markdown("---")
    st.subheader("üì© –û—Å—Ç–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å")

    if 'prediction_result' in st.session_state:
        actual_status = st.radio(
            "–§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å—Ç–∞—Ç—É—Å –∫—Ä–µ–¥–∏—Ç–∞:",
            options=[("–ö–ª–∏–µ–Ω—Ç –≤–µ—Ä–Ω—É–ª", 0), ("–ö–ª–∏–µ–Ω—Ç –Ω–µ –≤–µ—Ä–Ω—É–ª", 1)],
            format_func=lambda x: x[0]
        )

        if st.button("‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å"):
            result = st.session_state['prediction_result']
            input_data = st.session_state['input_data']

            feedback_data = input_data.copy()
            feedback_data["predicted_status"] = result["prediction"]
            feedback_data["actual_status"] = actual_status[1] if isinstance(actual_status, tuple) else actual_status

            try:
                fb_response = requests.post(
                    f"{API_BASE_URL}/feedback",
                    json=feedback_data,
                    auth=API_AUTH
                )
                if fb_response.status_code == 200:
                    st.success("‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –¥–ª—è –¥–æ–æ–±—É—á–µ–Ω–∏—è")
                else:
                    st.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ")
            except Exception as e:
                st.error("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å")
                st.exception(e)
    else:
        st.info("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑.")

# --- üßæ –§—É—Ç–µ—Ä ---
st.markdown("---")
st.caption("–ö—Ä–µ–¥–∏—Ç–Ω—ã–π —Å–∫–æ—Ä–∏–Ω–≥ ‚Äî –¥–∏–ø–ª–æ–º–Ω—ã–π –ø—Ä–æ–µ–∫—Ç | 2025")